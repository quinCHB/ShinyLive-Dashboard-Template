[{"name":"app.R","content":"# Shiny Dashboard\r\n# Hastag (# ---------------------------------------------------------------) means Primary Header\r\n# Hastag (### *** Definition ###) means Secondary Header\r\n# Hold  alt o to collapse all\r\n# Hold shift alt o to expand all\r\n\r\n# Load Packages ---------------------------------------------------------------\r\nlibrary(shiny)\r\nlibrary(shinydashboard)\r\n# library(shinyjs)  # This is used to help hide and show tabs and narratives. However, my experience as of 3/20/24 is it is slow to load for shinyLive\r\n# Please load it as needed which is why it is commented out\r\n\r\n# Loading data since this is a template, no data is actually pulled from somewhere.\r\n\r\n# Create the data frame\r\ndf <- data.frame(\r\n  #id can represent something like a region and var1 can represent something like a county (1 to many relationship)\r\n  #By referencing the region in the var1 label than there is no confusion as to what \"county\" belongs to what \"region\"\r\n  id = c(1, 1, 1, 2, 2, 2, 3, 3),\r\n  var1 = c(\"a (1)\", \"b (1)\", \"c (1)\", \"d (2)\", \"e (2)\", \"f (2)\", \"g (3)\", \"h (3)\")\r\n)\r\n\r\n# User Interface ----------------------------------------------------------\r\nui <- dashboardPage(\r\n  dashboardHeader(\r\n    title = \"Basic Dashboard Setup\",\r\n    titleWidth = 400\r\n    #disable = TRUE #uncomment if the header should be hid\r\n  ),\r\n  dashboardSidebar(\r\n    width = 350, #This makes the sidebar wider. However, the input boxes seem to have a set dimension resulting in long names still wrapping\r\n    #The input parameters are global parameters\r\n    checkboxInput(inputId = \"parGlobal_hideTabPanel\", label = \"HIDE TAB PANEL MENU ONE\"),\r\n    checkboxInput(inputId = \"parGlobal_hideNarrative\", label = \"HIDE NARRATIVE MENU TWO\"),\r\n    \r\n    # Other input elements...\r\n    selectInput(\r\n      \"parGlobal_inputOne\",\r\n      label= \"Select Letter of Interest\",\r\n      choices= sort(unique(df$var1)),\r\n      selected= \"c\", #Default selection\r\n      multiple= FALSE,\r\n      width= 350 \r\n    ),\r\n    #The following two parameters are set in the server based on the previous parameter (parGlobal_inputOne)\r\n    selectInput(\r\n      \"parGlobal_casscadeFromInputOneRestrictive\",\r\n      label= \"Select Cascade Prompt (Restrictive Options)\",\r\n      choices= NULL,\r\n      selected= NULL,\r\n      multiple= FALSE,\r\n      width= 350 \r\n    ),\r\n    selectInput(\r\n      \"parGlobal_casscadeFromInputOneNonRestrictive\",\r\n      label= \"Select Cascade Prompt (Non Restrictive Options)\",\r\n      choices= NULL,\r\n      selected= NULL,\r\n      multiple= FALSE,\r\n      width= 350 \r\n    ),\r\n    selectInput(\r\n      \"parGlobal_casscadeFromInputOneOneOption\",\r\n      label= \"Select Cascade Prompt (Only Dependent Option)\",\r\n      choices= NULL,\r\n      selected= NULL,\r\n      multiple= FALSE,\r\n      width= 350 \r\n    ),\r\n    #Sidebar is required to have sub menus because it requires the tabName to reference\r\n    sidebarMenu(\r\n      menuItem(text = \"Menu One\", tabName = \"tn_menuOne\"), # text is the menu label and tabName can be referenced like an unique index\r\n      menuItem(text = \"Menu Two\", tabName = \"tn_menuTwo\") # text is the menu label and tabName can be referenced like an unique index\r\n    )\r\n  ),\r\n  dashboardBody(\r\n    shinyjs::useShinyjs(), #For performance, shinyLive seems to load faster when it isn't loading the entier shinyjs package\r\n    fluidRow(\r\n      column(\r\n        12,\r\n        tabItems(\r\n          tabItem(\r\n            tabName = \"tn_menuOne\", #This is where when the sidebar is selected it is mapped to the tab menu\r\n            tabsetPanel(\r\n              id= \"tspID_hideTabPanel\", #This is required so the tab can be referenced so it can be hid or shown\r\n              tabPanel(\r\n                \"Menu One Tab Panel (Hide Tab Panel)\", #Tab Panel name\r\n                fluidRow(\r\n                  # Narrative section explaining the purpose of the dashboard\r\n                  column(\r\n                    width = 4, #fluid rows max value is 12\r\n                    h1(\"Small header\"),\r\n                    h2(\"Bigger Header\"),\r\n                    h3(\"Bigger Header\"),\r\n                    h4(\"Bigger Header\"),\r\n                    h5(\"Bigger Header\"),\r\n                    h6(\"Largest Header\"),\r\n                    p(\"smaller font\"),\r\n                    #The next line inserts a line between the narrative and the data by using css into application\r\n                    #Not really scallable if the line is placed in the fluid row, refer to Tab Two Panel (Hide Narrative) for more elegant process\r\n                    tags$hr(style = \"border-top: 1px solid #ccc; margin-top: 20px; margin-bottom: 20px;\")\r\n                  ),\r\n                  column(\r\n                    width = 4, #fluid rows max value is 12\r\n                    p(\"Refer to menuTwo R code to see why it is important to put the line below the narrative\"),\r\n                    #The next line inserts a line between the narrative and the data by using css into application\r\n                    tags$hr(style = \"border-top: 1px solid #ccc; margin-top: 20px; margin-bottom: 20px;\")\r\n                  ),\r\n                  column(\r\n                    width = 4, #fluid rows max value is 12\r\n                    p(\"The line is not consistent due to it being applied on each column\"),\r\n                    #The next line inserts a line between the narrative and the data by using css into application\r\n                    tags$hr(style = \"border-top: 1px solid #ccc; margin-top: 20px; margin-bottom: 20px;\")\r\n                  )\r\n                ),\r\n                fluidRow(\r\n                  h3(\"Another row\")\r\n                )\r\n              ),\r\n              tabPanel(\r\n                #id= id is not required but if you want to reference the tabPanel this is where you would do it\r\n                \"Menu One Tab Panel (Will Not Hide Tab Panel)\",\r\n                fluidRow(\r\n                  # Narrative section explaining the purpose of the dashboard\r\n                  column(\r\n                    width = 12,\r\n                    h3(HTML(\"Using HTML to change font color from black to <font color=red>red<\/font> as well as <b>bolding<\/b> text.\")),\r\n                  )\r\n                )\r\n              )\r\n            )\r\n          ),\r\n          tabItem(\r\n            tabName = \"tn_menuTwo\", #This is where when the sidebar is selected it is mapped to the tab menu\r\n            tabsetPanel(\r\n              #id= id is not required but if we want to reference the tabPanel this is where you would do it\r\n              tabPanel(\r\n                \"Menu Two Tab Panel (Hide Narrative)\", #Tab Panel name\r\n                fluidRow(\r\n                  # Narrative section explaining the purpose of the dashboard\r\n                  column(\r\n                    width = 1, #fluid rows max value is 12\r\n                    selectInput(\r\n                      \"tpID_parLocal_hideNarrative\",\r\n                      label= \"This is a local Narratie\",\r\n                      choices= c(\"Local\", \"Options\"),\r\n                      selected= NULL,\r\n                      multiple= FALSE\r\n                    )\r\n                  ),\r\n                  column(\r\n                    width = 11, #fluid rows max value is 12\r\n                    id = \"tpID_hideNarrative\", #id is required if the column within the tab panel has to be referenced\r\n                    h1(\"Wide Border\")\r\n                  )\r\n                ),\r\n                fluidRow(\r\n                  #The next line inserts a line between the narrative and the data.\r\n                  #It is added here instead of in the narrative since the narrative can have multiple columns. \r\n                  #If there are multiple narrative columns and the line is added there than the line consists of multiple breaks \r\n                  tags$hr(style = \"border-top: 1px solid #ccc; margin-top: 20px; margin-bottom: 20px;\"),\r\n                  # For plots and different sections shiny uses the box function\r\n                  box(h3(\"Another row\")),\r\n                  box(h3(\"Another row\"))\r\n                )\r\n              ),\r\n              #id= id is not required but if we want to reference the tabPanel this is where you would do it\r\n              tabPanel(\r\n                \"Menu Two Tab Panel (Hide Narrative)\", #Tab Panel name\r\n                fluidRow(\r\n                  # Narrative section explaining the purpose of the dashboard\r\n                  column(\r\n                    width = 1, #fluid rows max value is 12\r\n                    selectInput(\r\n                      \"tpID_parLocal_WillNotHideNarrative\", # This isn't tied to anything.\r\n                      label= \"This is a local Narratie\",\r\n                      choices= c(\"Local\", \"Options\"),\r\n                      selected= NULL,\r\n                      multiple= FALSE\r\n                    )\r\n                  ),\r\n                  column(\r\n                    width = 11, #fluid rows max value is 12\r\n                    id = \"tpID_hideNarrative\", #id is required if the column within the tab panel has to be referenced\r\n                    h1(\"Wide Border\")\r\n                  )\r\n                ),\r\n                fluidRow(\r\n                  #The next line inserts a line between the narrative and the data.\r\n                  #It is added here instead of in the narrative since the narrative can have multiple columns. \r\n                  #If there are multiple narrative columns and the line is added there than the line consists of multiple breaks \r\n                  tags$hr(style = \"border-top: 1px solid #ccc; margin-top: 20px; margin-bottom: 20px;\"),\r\n                  # For plots and different sections shiny uses the box function\r\n                  box(h3(\"Another row\")),\r\n                  box(h3(\"Another row\"))\r\n                )\r\n              ),\r\n            )\r\n          )\r\n        )\r\n      )\r\n      \r\n    )\r\n  )\r\n)\r\n\r\n# To improve performance load items once and don't run them every time in the server. This is my understanding as of 4/4/2024  --------\r\n# Although this is a simple example, it can be and should be applied to more complex calculations that occur only once\r\n\r\n\r\n\r\nserver <- function(input, output, session) {\r\n  \r\n  # When parGlobal_inputOne changes, this will return a non-restrictive list (User can still change options)\r\n  # Use Case could be results shown by a region shouldn't just be based on the county selected\r\n  # Utilized MS Copilot AI to get this to work \r\n  observeEvent(input$parGlobal_inputOne, {\r\n    if(input$parGlobal_inputOne %in% df$var1) {\r\n      # What the following is doing is taking the df id values and ordering them in the same order based on the selection\r\n      updateSelectInput(\r\n        session, \"parGlobal_casscadeFromInputOneRestrictive\",\r\n        choices =  unique(df$id[order(df$var1 == input$parGlobal_inputOne, decreasing = TRUE)]),\r\n        selected = unique(df$id[order(df$var1 == input$parGlobal_inputOne, decreasing = TRUE)])[1] #Default to the first choice, which will automatically change the cascading results when the parameter is mapped to a ggplot\r\n      )\r\n    }\r\n    else {\r\n      updateSelectInput(\r\n        session, \"parGlobal_casscadeFromInputOneRestrictive\",\r\n        choices = \"\",\r\n        selected = \"\"\r\n      )\r\n    }\r\n  }\r\n  )\r\n  \r\n  # When parGlobal_inputOne changes, this will return a restrictive list\r\n  # Worked with MS Copilot AI to get this to work \r\n  observeEvent(input$parGlobal_inputOne, {\r\n    if(input$parGlobal_inputOne %in% df$var1) {\r\n      \r\n      #Reorder the ids based on selection \r\n      orderedallIds <- df$id[order(df$var1 == input$parGlobal_inputOne, decreasing = TRUE)]\r\n      \r\n      # Reorder the var1 based on selection\r\n      orderedVar1 <- df$var1[order(df$var1 == input$parGlobal_inputOne, decreasing = TRUE)]\r\n      \r\n      #Combine var1 with id\r\n      labeledOptions <-  paste0(orderedVar1, \" (extra label because the label is included in orginal par (\", orderedallIds, \") )\")\r\n      \r\n      # Update the choices and selected values of the country input\r\n      updateSelectInput(\r\n        session, \"parGlobal_casscadeFromInputOneNonRestrictive\",\r\n        choices = labeledOptions,\r\n        selected = labeledOptions[1]\r\n      )\r\n    }\r\n    else {\r\n      updateSelectInput(\r\n        session, \"parGlobal_casscadeFromInputOneNonRestrictive\",\r\n        choices = \"\",\r\n        selected = \"\"\r\n      )\r\n    }\r\n  }\r\n  )\r\n  \r\n  # Cascading prompt that only shows dependent result\r\n  observeEvent(input$parGlobal_inputOne, {\r\n    if(input$parGlobal_inputOne %in% df$var1) {\r\n      updateSelectInput(\r\n        session, \"parGlobal_casscadeFromInputOneOneOption\",\r\n        choices = df$id[df$var1 == input$parGlobal_inputOne],\r\n        selected = df$id[df$var1 == input$parGlobal_inputOne]\r\n      )\r\n    }\r\n    else {\r\n      updateSelectInput(\r\n        session, \"parGlobal_casscadeFromInputOneOneOption\",\r\n        choices = \"\",\r\n        selected = \"\"\r\n      )\r\n    }\r\n  }\r\n  )\r\n  \r\n  # Hide Tab when checkbox is selected\r\n  #https://stackoverflow.com/questions/60054418/shiny-tab-hide-show\r\n  observeEvent(\r\n    input$parGlobal_hideTabPanel, ignoreNULL = FALSE, ignoreInit = TRUE, {\r\n      if(isTRUE(input$parGlobal_hideTabPanel)) \r\n        #inputId is the input parameter and target is the tab panel id\r\n      {\r\n        hideTab(inputId = \"tspID_hideTabPanel\" , target =\"Menu One Tab Panel (Hide Tab Panel)\")\r\n      } \r\n      else  {\r\n        showTab(inputId = \"tspID_hideTabPanel\" , target =\"Menu One Tab Panel (Hide Tab Panel)\")\r\n      }\r\n      \r\n    }\r\n  )\r\n  \r\n  # Observe the input value of the checkbox\r\n  #shinyjs has a function called hide, show, and toggle. Toggle is suppose to work as hide and show but I couldn't get it to function correctly with a checkbox \r\n  #Js stands for javascript\r\n  observeEvent(\r\n    input$parGlobal_hideNarrative, ignoreNULL = FALSE, ignoreInit = TRUE, {\r\n      if (isTRUE(input$parGlobal_hideNarrative)) {\r\n        # Enable the commented-out portion\r\n        shinyjs::hide(\"tpID_parLocal_hideNarrative\")\r\n        shinyjs::hide(\"tpID_hideNarrative\")\r\n      } \r\n      else {\r\n        # Disable the portion when checkbox is unchecked\r\n        shinyjs::show(\"tpID_parLocal_hideNarrative\")\r\n        shinyjs::show(\"tpID_hideNarrative\")\r\n      }\r\n    }\r\n  )\r\n}\r\n\r\nshinyApp(ui=ui, server=server)","type":"text"}]
